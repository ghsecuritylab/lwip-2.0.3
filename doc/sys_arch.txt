操作系统模拟层在 lwip 和操作系统内核底层之间提供一套公共接口。
通用的做法是移植 lwip 
到一个新的架构上仅仅需要对一小部分头文件进行很少的改动和实现新的 sys_arch,
也可以不依赖操作系统底层来实现 sys_arch。

sys_arch 为 lwip 提供 semaphores, mailboxes and mutexes。对于完整的 lwip，
sys_arch 可以实现多线程。对于基础的 lwip，不需要实现多线程。定时器调度实现
在 lwip 中，也通过 LWIP_TIMERS_CUSTOM==1 可以在 sys_arch 中实现

除了提供实现 sys_arch 功能的源文件外，操作系统模拟层还必须提供几个头文件来
定义 lwip 中使用的宏。这几个头文件和内部定义的宏描述在下面。

信号量可以是计数或者二进制(lwip 都支持)；邮箱应该实现为允许多条消息发布的
一个队列(同一时间只允许一条消息会对性能有很大影响)。邮箱中的消息应该仅仅是
一个指针

semaphores 类型 sys_sem_t 应该在 sys_arch.h 中使用 typedef 来重定义
mailboxes 类型 sys_mbox_t 应该在 sys_arch.h 中使用 typedef 来重定义
mutexes 类型 sys_mutex_t 应该在 sys_arch.h 中使用 typedef 来重定义
这些类型在 lwip 内部如何表示没有限制

从 1.4.0 开始，semaphore, mutexes and mailbox 被设计成使用指针或者使用实际
操作系统的结构体。这样，这些类型需要的内存可以就地分配(全局或者堆栈)，也可
以在堆上分配(*_new() 函数内部分配)

sys_arch 必须实现下列功能：
关于 semaphore
	void sys_init(void)									初始化 sys_arch 层
	err_t sys_sem_new(sys_sem_t *sem, u8_t count)		创建新的 semaphore
		分配一块内存，sem 指向这块内存( sem 指向的可能是指针或者结构体)。
		count 指定了 semaphore 的初始状态(0或者 1)
		执行成功返回 ERR_OK，如果返回其他值应该提供错误提示，但除了断言之外
		没有实现实际的错误处理
	void sys_sem_free(sys_sem_t *sem)					删除 semaphore
	void sys_sem_signal(sys_sem_t *sem)					释放 semaphore
	u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)	等待 semaphore
		当等待时阻塞线程。timeout 不为 0, 则阻塞指定时间(单位是 ms)。如果
		timeout = 0, 则阻塞直到 semaphore 释放。
		timeout不为 0，当 semaphore 释放时返回等待时间，不过在 timeout 时间
		内没有释放，则返回 SYS_ARCH_TIMEOUT。如果线程不必等待(例如 semaphore
		已经释放)，则有可能返回0。
		lwip 中实现了 sys_sem_wait() 使用了 sys_arch_sem_wait() 函数
	int sys_sem_valid(sys_sem_t *sem)				semaphore 是否有效
		返回 1表示有效，0表示无效
		如果使用指针，直接判断指针是否为空；如果是结构体，会有点复杂，
		这种情况下 sys_sem_valid 可能仅仅是一个宏定义，这时候不是一个原型
	void sys_sem_set_invalid(sys_sem_t *sem)		设置 semaphore 为无效以便
		sys_sem_valid() 可以返回 0；调用这个之前必须先调用 sys_sem_free()
		这个也可能是一个宏定义，这时候不是原型
关于 mutex
	void sys_mutex_new(sys_mutex_t *mutex)			创建一个 mutex
		分配一块内存，mutex 指向这块内存( mutex 指向的可能是指针或者结构体)。
		执行成功返回 ERR_OK，如果返回其他值应该提供错误提示，但除了断言之外
		没有实现实际的错误处理
	void sys_mutex_free(sys_mutex_t *mutex)			删除 mutex
	void sys_mutex_lock(sys_mutex_t *mutex)			获取 mutex
		阻塞线程直到获取了 mutex
	void sys_mutex_unlock(sys_mutex_t *mutex)		释放 mutex
		释放通过 sys_mutex_lock 获取到的 mutex
	

sys_arch interface for lwIP

Author: Adam Dunkels
        Simon Goldschmidt

The operating system emulation layer provides a common interface
between the lwIP code and the underlying operating system kernel. The
general idea is that porting lwIP to new architectures requires only
small changes to a few header files and a new sys_arch
implementation. It is also possible to do a sys_arch implementation
that does not rely on any underlying operating system.

The sys_arch provides semaphores, mailboxes and mutexes to lwIP. For the full
lwIP functionality, multiple threads support can be implemented in the
sys_arch, but this is not required for the basic lwIP
functionality. Timer scheduling is implemented in lwIP, but can be implemented
by the sys_arch port (LWIP_TIMERS_CUSTOM==1).

In addition to the source file providing the functionality of sys_arch,
the OS emulation layer must provide several header files defining
macros used throughout lwip.  The files required and the macros they
must define are listed below the sys_arch description.

Semaphores can be either counting or binary - lwIP works with both
kinds. Mailboxes should be implemented as a queue which allows multiple messages
to be posted (implementing as a rendez-vous point where only one message can be
posted at a time can have a highly negative impact on performance). A message
in a mailbox is just a pointer, nothing more. 

Semaphores are represented by the type "sys_sem_t" which is typedef'd
in the sys_arch.h file. Mailboxes are equivalently represented by the
type "sys_mbox_t". Mutexes are represented by the type "sys_mutex_t".
lwIP does not place any restrictions on how these types are represented
internally.

Since lwIP 1.4.0, semaphore, mutexes and mailbox functions are prototyped in a way that
allows both using pointers or actual OS structures to be used. This way, memory
required for such types can be either allocated in place (globally or on the
stack) or on the heap (allocated internally in the "*_new()" functions).

The following functions must be implemented by the sys_arch:

- void sys_init(void)

  Is called to initialize the sys_arch layer.

- err_t sys_sem_new(sys_sem_t *sem, u8_t count)

  Creates a new semaphore. The semaphore is allocated to the memory that 'sem'
  points to (which can be both a pointer or the actual OS structure).
  The "count" argument specifies the initial state of the semaphore (which is
  either 0 or 1).
  If the semaphore has been created, ERR_OK should be returned. Returning any
  other error will provide a hint what went wrong, but except for assertions,
  no real error handling is implemented.

- void sys_sem_free(sys_sem_t *sem)

  Deallocates a semaphore.

- void sys_sem_signal(sys_sem_t *sem)

  Signals a semaphore.

- u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)

  Blocks the thread while waiting for the semaphore to be
  signaled. If the "timeout" argument is non-zero, the thread should
  only be blocked for the specified time (measured in
  milliseconds). If the "timeout" argument is zero, the thread should be
  blocked until the semaphore is signalled.

  If the timeout argument is non-zero, the return value is the number of
  milliseconds spent waiting for the semaphore to be signaled. If the
  semaphore wasn't signaled within the specified time, the return value is
  SYS_ARCH_TIMEOUT. If the thread didn't have to wait for the semaphore
  (i.e., it was already signaled), the function may return zero.

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.

- int sys_sem_valid(sys_sem_t *sem)

  Returns 1 if the semaphore is valid, 0 if it is not valid.
  When using pointers, a simple way is to check the pointer for != NULL.
  When directly using OS structures, implementing this may be more complex.
  This may also be a define, in which case the function is not prototyped.

- void sys_sem_set_invalid(sys_sem_t *sem)

  Invalidate a semaphore so that sys_sem_valid() returns 0.
  ATTENTION: This does NOT mean that the semaphore shall be deallocated:
  sys_sem_free() is always called before calling this function!
  This may also be a define, in which case the function is not prototyped.

- void sys_mutex_new(sys_mutex_t *mutex)

  Creates a new mutex. The mutex is allocated to the memory that 'mutex'
  points to (which can be both a pointer or the actual OS structure).
  If the mutex has been created, ERR_OK should be returned. Returning any
  other error will provide a hint what went wrong, but except for assertions,
  no real error handling is implemented.

- void sys_mutex_free(sys_mutex_t *mutex)

  Deallocates a mutex.

- void sys_mutex_lock(sys_mutex_t *mutex)
  
  Blocks the thread until the mutex can be grabbed.

- void sys_mutex_unlock(sys_mutex_t *mutex)

  Releases the mutex previously locked through 'sys_mutex_lock()'.

- void sys_mutex_valid(sys_mutex_t *mutex)

  Returns 1 if the mutes is valid, 0 if it is not valid.
  When using pointers, a simple way is to check the pointer for != NULL.
  When directly using OS structures, implementing this may be more complex.
  This may also be a define, in which case the function is not prototyped.

- void sys_mutex_set_invalid(sys_mutex_t *mutex)

  Invalidate a mutex so that sys_mutex_valid() returns 0.
  ATTENTION: This does NOT mean that the mutex shall be deallocated:
  sys_mutex_free() is always called before calling this function!
  This may also be a define, in which case the function is not prototyped.

- err_t sys_mbox_new(sys_mbox_t *mbox, int size)

  Creates an empty mailbox for maximum "size" elements. Elements stored
  in mailboxes are pointers. You have to define macros "_MBOX_SIZE"
  in your lwipopts.h, or ignore this parameter in your implementation
  and use a default size.
  If the mailbox has been created, ERR_OK should be returned. Returning any
  other error will provide a hint what went wrong, but except for assertions,
  no real error handling is implemented.

- void sys_mbox_free(sys_mbox_t *mbox)

  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.

- void sys_mbox_post(sys_mbox_t *mbox, void *msg)

  Posts the "msg" to the mailbox. This function have to block until
  the "msg" is really posted.

- err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)

  Try to post the "msg" to the mailbox. Returns ERR_MEM if this one
  is full, else, ERR_OK if the "msg" is posted.

- u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)

  Blocks the thread until a message arrives in the mailbox, but does
  not block the thread longer than "timeout" milliseconds (similar to
  the sys_arch_sem_wait() function). If "timeout" is 0, the thread should
  be blocked until a message arrives. The "msg" argument is a result
  parameter that is set by the function (i.e., by doing "*msg =
  ptr"). The "msg" parameter maybe NULL to indicate that the message
  should be dropped.

  The return values are the same as for the sys_arch_sem_wait() function:
  Number of milliseconds spent waiting or SYS_ARCH_TIMEOUT if there was a
  timeout.

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP. 

- u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)

  This is similar to sys_arch_mbox_fetch, however if a message is not
  present in the mailbox, it immediately returns with the code
  SYS_MBOX_EMPTY. On success 0 is returned.

  To allow for efficient implementations, this can be defined as a
  function-like macro in sys_arch.h instead of a normal function. For
  example, a naive implementation could be:
    #define sys_arch_mbox_tryfetch(mbox,msg) \
      sys_arch_mbox_fetch(mbox,msg,1)
  although this would introduce unnecessary delays.

- int sys_mbox_valid(sys_mbox_t *mbox)

  Returns 1 if the mailbox is valid, 0 if it is not valid.
  When using pointers, a simple way is to check the pointer for != NULL.
  When directly using OS structures, implementing this may be more complex.
  This may also be a define, in which case the function is not prototyped.

- void sys_mbox_set_invalid(sys_mbox_t *mbox)

  Invalidate a mailbox so that sys_mbox_valid() returns 0.
  ATTENTION: This does NOT mean that the mailbox shall be deallocated:
  sys_mbox_free() is always called before calling this function!
  This may also be a define, in which case the function is not prototyped.

If threads are supported by the underlying operating system and if
such functionality is needed in lwIP, the following function will have
to be implemented as well:

- sys_thread_t sys_thread_new(char *name, void (* thread)(void *arg), void *arg, int stacksize, int prio)

  Starts a new thread named "name" with priority "prio" that will begin its
  execution in the function "thread()". The "arg" argument will be passed as an
  argument to the thread() function. The stack size to used for this thread is
  the "stacksize" parameter. The id of the new thread is returned. Both the id
  and the priority are system dependent.

When lwIP is used from more than one context (e.g. from multiple threads OR from
main-loop and from interrupts), the SYS_LIGHTWEIGHT_PROT protection SHOULD be enabled!

- sys_prot_t sys_arch_protect(void)

  This optional function does a "fast" critical region protection and returns
  the previous protection level. This function is only called during very short
  critical regions. An embedded system which supports ISR-based drivers might
  want to implement this function by disabling interrupts. Task-based systems
  might want to implement this by using a mutex or disabling tasking. This
  function should support recursive calls from the same task or interrupt. In
  other words, sys_arch_protect() could be called while already protected. In
  that case the return value indicates that it is already protected.

  sys_arch_protect() is only required if your port is supporting an operating
  system.

- void sys_arch_unprotect(sys_prot_t pval)

  This optional function does a "fast" set of critical region protection to the
  value specified by pval. See the documentation for sys_arch_protect() for
  more information. This function is only required if your port is supporting
  an operating system.

For some configurations, you also need:

- u32_t sys_now(void)

  This optional function returns the current time in milliseconds (don't care
  for wraparound, this is only used for time diffs).
  Not implementing this function means you cannot use some modules (e.g. TCP
  timestamps, internal timeouts for NO_SYS==1).


Note:

Be careful with using mem_malloc() in sys_arch. When malloc() refers to
mem_malloc() you can run into a circular function call problem. In mem.c
mem_init() tries to allcate a semaphore using mem_malloc, which of course
can't be performed when sys_arch uses mem_malloc.

-------------------------------------------------------------------------------
Additional files required for the "OS support" emulation layer:
-------------------------------------------------------------------------------

cc.h       - Architecture environment, some compiler specific, some
             environment specific (probably should move env stuff 
             to sys_arch.h.)

  Typedefs for the types used by lwip -
    u8_t, s8_t, u16_t, s16_t, u32_t, s32_t, mem_ptr_t

  Compiler hints for packing lwip's structures -
    PACK_STRUCT_FIELD(x)
    PACK_STRUCT_STRUCT
    PACK_STRUCT_BEGIN
    PACK_STRUCT_END

  Platform specific diagnostic output -
    LWIP_PLATFORM_DIAG(x)    - non-fatal, print a message.
    LWIP_PLATFORM_ASSERT(x)  - fatal, print message and abandon execution.
    Portability defines for printf formatters:
    U16_F, S16_F, X16_F, U32_F, S32_F, X32_F, SZT_F

  "lightweight" synchronization mechanisms -
    SYS_ARCH_DECL_PROTECT(x) - declare a protection state variable.
    SYS_ARCH_PROTECT(x)      - enter protection mode.
    SYS_ARCH_UNPROTECT(x)    - leave protection mode.

  If the compiler does not provide memset() this file must include a
  definition of it, or include a file which defines it.

  This file must either include a system-local <errno.h> which defines
  the standard *nix error codes, or it should #define LWIP_PROVIDE_ERRNO
  to make lwip/arch.h define the codes which are used throughout.


perf.h     - Architecture specific performance measurement.
  Measurement calls made throughout lwip, these can be defined to nothing.
    PERF_START               - start measuring something.
    PERF_STOP(x)             - stop measuring something, and record the result.

sys_arch.h - Tied to sys_arch.c

  Arch dependent types for the following objects:
    sys_sem_t, sys_mbox_t, sys_thread_t,
  And, optionally:
    sys_prot_t

  Defines to set vars of sys_mbox_t and sys_sem_t to NULL.
    SYS_MBOX_NULL NULL
    SYS_SEM_NULL NULL
