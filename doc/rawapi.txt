lwip 提供三种 API 接口用于应用程序与 TCP/IP 代码通信：raw API;sequential API;BSD socket API

raw API 是事件驱动类型的 API，用于没有操作系统的环境下，实现发送接收的零拷贝。这种 
API 也用于协议栈种不同协议之间的交互。当环境种没有操作系统时只有这种 API 可用。

sequential API 提供使用 lwip 协议栈通用的方法。与 BSD socket API 相似。执行模型基于
阻塞的打开-读-写-关闭模型。由于 tcp/ip 协议栈本质上是基于事件驱动的，所以 tcp/ip 代码
与应用程序必须驻留在不同上下文(线程)。

BSD socket API 是现有应用程序的兼容 API, 构建于 sequential API 基础之上。为运行于其他平台
上的基于 socket API 应用程序提供所有功能。由于这种 API 
规范的限制，一些不兼容可能需要对现有程序进行小的改动。

关于多线程
lwip 起初是针对单线程环境。当多线程支持时，不采用核心线程安全，而采用将 lwip 
内核运行于一个单独的线程(tcpip_thread)。当运行多线程时，raw API 必须仅仅被 tcpip_thread 
调用，因为 raw API 不受并发访问的保护(除了 pbuf- 和内存管理功能)。使用 sequential 和 socket 
API 的应用程序线程与 
tcpip_thread 之间通过消息传递来通信。
因此，可以被其他线程或者中断调用的函数列表非常有限。仅仅来自下列头文件中的接口是线程安全的：
	- api.h
	- netbuf.h
	- netdb.h
	- netifapi.h
	- pppapi.h
	- sockets.h
	- sys.h
当 NO_SYS = 0 时，内存分配和释放函数可以被多线程调用(不是中断)，因为他们受 SYS_LIGHTWEIGHT_PROT 和
semaphores保护。
Netconn 和 socket API 对于 tcpip_thread 
来说是线程安全的，但是在控制块级别是不可重入的。因此 UDP 和 TCP 
控制块如果没有合适的 lock，不能在多个线程间共享。

如果 SYS_LIGHTWEIGHT_PROT = 1 和 LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT = 1，pbuf_free() 
可以被其他线程和中断调用(因为只有这样，应用于 PBUF_RAM 的 mem_free 
可以被中断调用，否则 HEAP 仅仅被 semaphores 保护)

关于 raw API:
raw API 允许应用程序更好的集成 TCP/IP 代码。程序执行基于 TCP/IP 
中调用事件回调函数。TCP/IP 和应用程序运行在同一个线程中。sequential API 开销比较大，
不适合小型系统，由于它强制应用程序采用多线程。

raw API 不仅在代码执行方面更快，而且消耗更少内存。缺点是程序开发比较困难，使用该接口写的应用
程序不容易理解。尽管如此，仍然是对代码大小和内存有限制的应用程序的最佳选择。

所有的 API 可以被不同的应用程序同时使用，事实上 sequential API 是使用 raw API 
接口实现的应用程序。

不要混淆 raw API 和 raw Ethernet or IP socket, 前者是访问 lwip 协议栈接口(包括 TCP 和 UDP)的一种方式；
后者是处理以太网和 IP 的原始数据而不是 TCP 连接和 UDP 包。

raw API 永远也不会阻塞，因为所有的包处理(输入/输出)和定时器处理(主要是 
TCP)都是在单线程环境中执行。

关于回调：
程序执行是回调驱动，当应用程序相关的活动发生时，lwip 内核调用相应回调函数。
一个特定的应用程序可以通过一个回调函数注册来获取事件通知，比如接收数据可用，
数据已经发送，错误通知，定时器超时，连接关闭等等。。
应用可以提供回调函数来处理这些事件，每一个回调都是 lwip 内核调用的原生的 C 函数；
每个回调都将当前的 TCP/UDP 
的连接状态作为参数传递。为了保持应用程序特定的状态，回调函数也传递应用程序指定的参数,
该参数与 TCP/IP 状态无关。


void tcp_arg(struct tcp_pcb *pcb, void *arg)
	指定应用于所有回调函数的应用程序状态
	pcb 指定当前 TCP 连接控制块
	arg 传递给回调函数的应用程序参数

用于设置连接的函数类似于 sequential API 和 BSD socket API. 一个新的 TCP 连接标识(pcb)随着 tcp_new()
创建，这个 pcb 可以用来监听，也可以用来连接到其他主机。

struct tcp_pcb *tcp_new(void)	
	创建一个新的 tcp 连接标识(pcb),如果内存不够或其他错误则返回 NULL

err_t tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
	将 pcb 绑定到本地地址和端口， ipaddr 可以指定为 IP_ADDR_ANY 
	以便绑定这个连接到所有的本地地址。
	如果其他连接已经绑定了同样的端口，则会返回 ERR_USE, 如果成功则返回 ERR_OK

struct tcp_pcb *tcp_listen(struct tcp_pcb *pcb)
	pcb 开始监听tcp 连接请求，当一个 tcp 连接被接收，tcp_accept() 被调用来接受这个连接
	这个 pcb 必须已经通过 tcp_bind() 绑定了一个本地端口。
	tcp_listen 会返回一个新的 tcp pcb, 作为参数传递的 pcb 会被释放。这样做的原因是
	用于监听的连接需要更少的内存，因此 tcp_listen 回收传递的 pcb 内存，并分配一块更少的
	内存用于监听的 pcb
	如果内存不足，tcp_listen 会返回NULL, 这样的化，参数传递进去的 pcb 不会被释放

struct tcp_pcb *tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
	功能于 tcp_listen 相似，只是通过 backlog 限制了监听队列数量(已连接的和未连接的？？)，
	如果要使用这个功能需要 lwipopts.h 中 TCP_LISTEN_BACKLOG=1

void tcp_accept(struct tcp_pcb *pcb,
                  err_t (* accept)(void *arg, struct tcp_pcb *newpcb,
                                   err_t err))
   	指定当监听连接监听到一个新连接时需要调用的回调函数

err_t tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr,
                    u16_t port, err_t (* connected)(void *arg,
                                                    struct tcp_pcb *tpcb,
                                                    err_t err));
    设置连接到远程主机的 pcb 并发送 SYN 报文来打开这个连接
    tcp_connect 直接返回，不会等待连接成功。如果连接成功，connected 
    回调函数会调用，如果连接失败(由于远程主机拒绝，或者远程主机没有相应)，回调函数中的 
    err参数会使用(前提是 tcp_err 已经注册了)
    如果 SYN 报文入队的内存不够，返回 ERR_MEM; 如果没有错误，则返回 ERR_OK

TCP 数据通过调用 tcp_write() 
将数据加入队列来发送数据，当数据成功发送到远程主机，会调用指定的对调函数来通知应用程序。

err_t tcp_write(struct tcp_pcb *pcb, const void *dataptr, u16_t len,
                  u8_t apiflags)
	dataptr:要加入队列的数据
	len:要加入队列数据的长度
	apiflags:可以二者同时设置
		TCP_WRITE_FLAG_COPY：是否为数据分配新的内存，如果设置则分配；否则不分配，
		数据仅仅通过指针引用，意味着当没有收到远程主机的 ack 时，dataptr 
		指向的数据不能改变
		TCP_WRITE_FLAG_MORE：表示后面是否还有数据，如果省略这个选项，PSH标志将在调用tcp_write
		创建的最后一个段中设置。如果给出了此标志，则未设置PSH标志。
	如果数据长度超过当前发送缓冲区的长度或者发送队列的长度大于 
	lwipopts.h中定义的上限，返回 ERR_MEM.可以使用 tcp_sndbuf() 来查看发送队列中可以用的字节数

	最好的方法时，调用 tcp_sndbuf() 来查看可以发送的字节数，然后再调用 tcp_write()
	如果返回 ERR_MEM, 应用程序应该等待远程主机成功接收到队列中的数据后，然后重新发送。

void tcp_sent(struct tcp_pcb *pcb,
                err_t (* sent)(void *arg, struct tcp_pcb *tpcb,
                u16_t len))
	指定数据被远程主机成功接收后调用的回调函数， 回调函数中的len 
	参数给出了最后一次 ack 确认的字节数

TCP 
接收数据是基于回调函数的，当数据到来时，指定的回调函数被调用，当应用程序已经获取数据后，可以通过调用 
tcp_recved() 来发出 tcp 可以广播增加接收窗口的通知

void tcp_recv(struct tcp_pcb *pcb,
                err_t (* recv)(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err))
	设置数据来临时的回调函数，当 pbuf = NULL 
	表示远程主机关闭了该连接。如果没有错误发生，回调函数会返回 ERR_OK,然后必须释放 
	pbuf.否则一定不能释放 pbuf,以便 lwip 内核继续保存。

void tcp_recved(struct tcp_pcb *pcb, u16_t len)
	应用程序接收完成数据后必须调用这个函数。len表示接收的数据长度

连接闲置时(没有发送和接收)，lwip 
会通过调用指定的回调函数来轮询应用程序，这样既可以通过定时器来关闭长时间闲置的连接，也可以用于等待内存释放。
例如：如果调用 tcp_write 
由于内存不足而失败，一段时间后应用程序可以使用轮询功能来重新调用 tcp_write

void tcp_poll(struct tcp_pcb *pcb, 
                err_t (* poll)(void *arg, struct tcp_pcb *tpcb),
                u8_t interval)
	指定轮询的回调函数和轮询间隔。interval 是由 tcp 粗粒度计时器数量决定的，通用是 
	1秒两次。设置为 10 表示 5秒轮询一次。

err_t tcp_close(struct tcp_pcb *pcb)
	关闭连接。如果内存不够会返回 ERR_MEM. 
	如果这样，应用程序应该等待，并通过ack回调和轮询功能进行重试，如果执行成功，则返回 
	ERR_OK, 调用了 tcp_close 后，pcb 会被 lwip释放？不成功也释放吗？

void tcp_abort(struct tcp_pcb *pcb)
	通过发送 RST 帧来中止与远程主机的连接，pcb 被释放。
	注意：如果在tcp 回调函数中调用该函数，请确保总是返回 
	ERR_ABRT,否则会有访问已释放内存或者内存泄漏的危险

如果连接由于错误中止，应用程序会被 err 
事件回调来通知。中止一个连接的错误可能是内存不足，回调是通过 tcp_err() 来设置的

void tcp_err(struct tcp_pcb *pcb, void (* err)(void *arg,
       err_t err))
    回调函数中没有 pcb 参数是由于 pcb 可能已经被释放了

UDP 接口

struct udp_pcb *udp_new(void)
	创建一个用于 UDP 通信的 UDP pcb。这个 pcb 
	在绑定到本地地址或者与远程主机连接之前是不活动的

void udp_remove(struct udp_pcb *pcb)
	释放 udp pcb

err_t udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr,
                 u16_t port)
	绑定 udp pcb 到一个本地地址，ipaddr 可以指定为 IP_ADDR_ANY 
	以便绑定这个连接到所有的本地地址。目前这个函数总是返回 ERR_OK

err_t udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr,
                    u16_t port)
	设置 udp pcb 的远程端，该函数不会发送任何报文，仅仅设置 udp pcb 的远程地址

err_t udp_disconnect(struct udp_pcb *pcb)
	移除 udp pcb 的远程端，该函数不会发送任何报文，仅仅移除 udp pcb 的远程地址
	
err_t udp_send(struct udp_pcb *pcb, struct pbuf *p)
	发送 p, p 不会被释放????

void udp_recv(struct udp_pcb *pcb,
                void (* recv)(void *arg, struct udp_pcb *upcb,
                                         struct pbuf *p,
                                         ip_addr_t *addr,
                                         u16_t port),
                              void *recv_arg)
	指定当接收到 udp 数据时调用的回调函数

系统初始化：
关于用户定义宏在 lwipopts.h 中定义，lwip/opt.h 中会包含这个头文件，并设置一些默认的宏
无法给出一个真正完整的通用的初始化列表，因为依赖于运行环境的额外初始化(例如定时器)
关于使用 raw api，这里给出一些想法，假设使用了一个 netif， udp,tcp，IPv4和 DHCP 客户端，
按顺序调用下列函数：
lwip_init()
	初始化 lwip 协议栈和所有子系统
netif_add(struct netif *netif, const ip4_addr_t *ipaddr,
            const ip4_addr_t *netmask, const ip4_addr_t *gw,
            void *state, netif_init_fn init, netif_input_fn input)
	添加网络接口到 netif_list, 分配一个 netif 并将其指针作为第一个参数，
	地址指针，当使用 dhcp 时清零，否则设置指定的值作为静态地址。state 指针可以为 NULL
	init 指针必须指向netif 接口的一个初始化函数，下面是一个演示：
		  err_t netif_if_init(struct netif *netif)
		  {
		    u8_t i;
		    
		    for (i = 0; i < ETHARP_HWADDR_LEN; i++) {
		      netif->hwaddr[i] = some_eth_addr[i];
		    }
		    init_my_eth_device();
		    return ERR_OK;
		  }
	对于以太网驱动，input 函数指针必须指向声明在 netif/etharp.h 中的 
	ethernet_input()；其他驱动必须使用声明在 lwip/ip.h 中的 ip_input()

netif_set_default(struct netif *netif)
	注册默认的网络接口

netif_set_link_up(struct netif *netif)
	这是硬件链路状态，例如网线是否插拔。即使不知当前状态也要调用该函数，有up 和 
	down 事件可选。这些事件对dhcp 和 ipv6 发现有帮助

netif_set_up(struct netif *netif)
	这是软件状态，当 netif 完成配置后，必须调用该函数

dhcp_start(struct netif *netif)
	netif 接口第一次调用时创建 DHCP 客户端，可以通过查看 netif->dhcp 来查看实际 DHCP 状态

sys_check_timeouts()
	当系统运行时，必须周期调用该函数来处理协议栈中所有协议的定时器，添加这个到主循环中或者等效循环中

关于优化
	优化 src/core/inet.c 中的 lwip_standard_checksum()， 可以通过定义 #define LWIP_CHKSUM 
	<your_checksum_routine>. 来覆盖。
	inet.c 中有个 C 例子，如果你想用汇编来实现，RFC1071 中有更好的介绍

	如果使用小端架构可以使用汇编或者内联函数来替代 htons() 和 htonl()
	如果要使用用户定义的 #define lwip_htonl(x) <your_htonl> 系列函数，则需要定义宏 LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS 
	来阻止 lwip 来 #define htons* 系列宏

	检查网络接口驱动的读取速度是否足够快。如果不对硬件提供足够快的服务就有可能发生缓冲区溢出的问题
	例如使用cs8900驱动程序时，尽可能快地调用 cs8900if_service。使用 RTOS 让 cs8900 
	中断唤醒一个更高优先级任务（使用信号量或者标志来服务驱动程序）。一些驱动程序可能允许一些其他调优来匹配你的应用和网络

	对于应用的产品，推荐将 LWIP_STATS  设置为 0；
	
	简单地对内存选项的值设置为高值不会对速度性能产生太大影响

	为了实现零拷贝传输，传递给 API 
	的数据指针指向的数据在发送成功之前不能被改变。因为 API 
	返回后，数据仅仅加入队列还没有发送成功
	意味着传递给 raw API 的 PBUF_RAM/PBUF_POOL pbufs 不能被重用，除非 ref-count是 1
	对于零拷贝的 PBUF_ROM/PBUF_REF，数据也要保持不变，协议帧和驱动在入队时必须拷贝 
	PBUF_REF 的数据，PBUF_ROM 的数据不需要拷贝。
	另外，传递给 tcp_write 函数的没有 copy 标识的数据不能被改变。
	因此需要注意使用那种类型的 PBUF,以及是否需要 copy 数据
	
	
	
参考：https://blog.csdn.net/ZCShouCSDN/article/details/80282907
内存池管理：
	MEMP_MEM_MALLOC = 1 表示使用内存堆来分配内存池
	MEM_USE_POOLS = 1 表示使用内存池来分配内存堆
	
内存堆管理：
	C 运行时库自带的分配策略	MEM_LIBC_MALLOC = 1
	lwip 协议栈实现的分配策略	MEM_LIBC_MALLOC = 0
	
内存堆：事先定义好大小的内存块中进行管理，采用最快合适方式。
优点是：内存浪费小，比较简单，适合小内存管理
缺点：频繁的分配和释放会造成严重的内存碎片

内存池：预先开辟国歌固定大小的内存块组成链表。
优点：实现简单，分配回收速度快，不会产生内存碎片
缺点：大小固定

内存对齐：为了处理器读取内存数据的效率

MEM_LIBC_MALLOC: 该宏值定义是否使用 C 
运行时库自带的内存分配策略。该值默认情况下为0，表示不使用C 
运行时库自带的内存分配策略。

	
即默认使用LwIP提供的内存堆分配策略。如果要使用C运行时库自带的分配策略，则需要把该
值定义为 1。此时，宏值MEM_USE_POOLS必然不能为 1。

MEMP_MEM_MALLOC: 
该宏值定义是否使用lwip内存堆分配策略实现内存池分配（即：要从内存池中获取内存时，实际是从内存堆中分配）。

	默认情况下为 
0，表示不从内存堆中分配，内存池为独立一块内存实现。与MEM_USE_POOLS只能选择其一。

MEM_USE_POOLS：该宏值定时是否使用lwip内存池分配策略实现内存堆的分配（即：要从内存堆中
获取内存时，实际是从内存池中分配）。

	默认情况下为 0，表示不使用。与MEMP_MEM_MALLOC只能选择其一。


Raw TCP/IP interface for lwIP

Authors: Adam Dunkels, Leon Woestenberg, Christiaan Simons

lwIP provides three Application Program's Interfaces (APIs) for programs
to use for communication with the TCP/IP code:
* low-level "core" / "callback" or "raw" API.
* higher-level "sequential" API.
* BSD-style socket API.

The raw API (sometimes called native API) is an event-driven API designed
to be used without an operating system that implements zero-copy send and
receive. This API is also used by the core stack for interaction between
the various protocols. It is the only API available when running lwIP
without an operating system.

The sequential API provides a way for ordinary, sequential, programs
to use the lwIP stack. It is quite similar to the BSD socket API. The
model of execution is based on the blocking open-read-write-close
paradigm. Since the TCP/IP stack is event based by nature, the TCP/IP
code and the application program must reside in different execution
contexts (threads).

The socket API is a compatibility API for existing applications,
currently it is built on top of the sequential API. It is meant to
provide all functions needed to run socket API applications running
on other platforms (e.g. unix / windows etc.). However, due to limitations
in the specification of this API, there might be incompatibilities
that require small modifications of existing programs.

** Multithreading

lwIP started targeting single-threaded environments. When adding multi-
threading support, instead of making the core thread-safe, another
approach was chosen: there is one main thread running the lwIP core
(also known as the "tcpip_thread"). When running in a multithreaded
environment, raw API functions MUST only be called from the core thread
since raw API functions are not protected from concurrent access (aside
from pbuf- and memory management functions). Application threads using
the sequential- or socket API communicate with this main thread through
message passing.

      As such, the list of functions that may be called from
      other threads or an ISR is very limited! Only functions
      from these API header files are thread-safe:
      - api.h
      - netbuf.h
      - netdb.h
      - netifapi.h
      - pppapi.h
      - sockets.h
      - sys.h

      Additionaly, memory (de-)allocation functions may be
      called from multiple threads (not ISR!) with NO_SYS=0
      since they are protected by SYS_LIGHTWEIGHT_PROT and/or
      semaphores.

      Netconn or Socket API functions are thread safe against the
      core thread but they are not reentrant at the control block
      granularity level. That is, a UDP or TCP control block must
      not be shared among multiple threads without proper locking.

      If SYS_LIGHTWEIGHT_PROT is set to 1 and
      LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT is set to 1,
      pbuf_free() may also be called from another thread or
      an ISR (since only then, mem_free - for PBUF_RAM - may
      be called from an ISR: otherwise, the HEAP is only
      protected by semaphores).


** The remainder of this document discusses the "raw" API. **

The raw TCP/IP interface allows the application program to integrate
better with the TCP/IP code. Program execution is event based by
having callback functions being called from within the TCP/IP
code. The TCP/IP code and the application program both run in the same
thread. The sequential API has a much higher overhead and is not very
well suited for small systems since it forces a multithreaded paradigm
on the application.

The raw TCP/IP interface is not only faster in terms of code execution
time but is also less memory intensive. The drawback is that program
development is somewhat harder and application programs written for
the raw TCP/IP interface are more difficult to understand. Still, this
is the preferred way of writing applications that should be small in
code size and memory usage.

All APIs can be used simultaneously by different application
programs. In fact, the sequential API is implemented as an application
program using the raw TCP/IP interface.

Do not confuse the lwIP raw API with raw Ethernet or IP sockets.
The former is a way of interfacing the lwIP network stack (including
TCP and UDP), the later refers to processing raw Ethernet or IP data
instead of TCP connections or UDP packets.

Raw API applications may never block since all packet processing
(input and output) as well as timer processing (TCP mainly) is done
in a single execution context.

--- Callbacks

Program execution is driven by callbacks functions, which are then
invoked by the lwIP core when activity related to that application
occurs. A particular application may register to be notified via a
callback function for events such as incoming data available, outgoing
data sent, error notifications, poll timer expiration, connection
closed, etc. An application can provide a callback function to perform
processing for any or all of these events. Each callback is an ordinary
C function that is called from within the TCP/IP code. Every callback
function is passed the current TCP or UDP connection state as an
argument. Also, in order to be able to keep program specific state,
the callback functions are called with a program specified argument
that is independent of the TCP/IP state.

The function for setting the application connection state is:

- void tcp_arg(struct tcp_pcb *pcb, void *arg)

  Specifies the program specific state that should be passed to all
  other callback functions. The "pcb" argument is the current TCP
  connection control block, and the "arg" argument is the argument
  that will be passed to the callbacks.

  
--- TCP connection setup

The functions used for setting up connections is similar to that of
the sequential API and of the BSD socket API. A new TCP connection
identifier (i.e., a protocol control block - PCB) is created with the
tcp_new() function. This PCB can then be either set to listen for new
incoming connections or be explicitly connected to another host.

- struct tcp_pcb *tcp_new(void)

  Creates a new connection identifier (PCB). If memory is not
  available for creating the new pcb, NULL is returned.

- err_t tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr,
                 u16_t port)

  Binds the pcb to a local IP address and port number. The IP address
  can be specified as IP_ADDR_ANY in order to bind the connection to
  all local IP addresses.

  If another connection is bound to the same port, the function will
  return ERR_USE, otherwise ERR_OK is returned.

- struct tcp_pcb *tcp_listen(struct tcp_pcb *pcb)

  Commands a pcb to start listening for incoming connections. When an
  incoming connection is accepted, the function specified with the
  tcp_accept() function will be called. The pcb will have to be bound
  to a local port with the tcp_bind() function.

  The tcp_listen() function returns a new connection identifier, and
  the one passed as an argument to the function will be
  deallocated. The reason for this behavior is that less memory is
  needed for a connection that is listening, so tcp_listen() will
  reclaim the memory needed for the original connection and allocate a
  new smaller memory block for the listening connection.

  tcp_listen() may return NULL if no memory was available for the
  listening connection. If so, the memory associated with the pcb
  passed as an argument to tcp_listen() will not be deallocated.

- struct tcp_pcb *tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)

  Same as tcp_listen, but limits the number of outstanding connections
  in the listen queue to the value specified by the backlog argument.
  To use it, your need to set TCP_LISTEN_BACKLOG=1 in your lwipopts.h.

- void tcp_accept(struct tcp_pcb *pcb,
                  err_t (* accept)(void *arg, struct tcp_pcb *newpcb,
                                   err_t err))

  Specified the callback function that should be called when a new
  connection arrives on a listening connection.

- err_t tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr,
                    u16_t port, err_t (* connected)(void *arg,
                                                    struct tcp_pcb *tpcb,
                                                    err_t err));

  Sets up the pcb to connect to the remote host and sends the
  initial SYN segment which opens the connection. 

  The tcp_connect() function returns immediately; it does not wait for
  the connection to be properly setup. Instead, it will call the
  function specified as the fourth argument (the "connected" argument)
  when the connection is established. If the connection could not be
  properly established, either because the other host refused the
  connection or because the other host didn't answer, the "err"
  callback function of this pcb (registered with tcp_err, see below)
  will be called.

  The tcp_connect() function can return ERR_MEM if no memory is
  available for enqueueing the SYN segment. If the SYN indeed was
  enqueued successfully, the tcp_connect() function returns ERR_OK.


--- Sending TCP data

TCP data is sent by enqueueing the data with a call to
tcp_write(). When the data is successfully transmitted to the remote
host, the application will be notified with a call to a specified
callback function.

- err_t tcp_write(struct tcp_pcb *pcb, const void *dataptr, u16_t len,
                  u8_t apiflags)

  Enqueues the data pointed to by the argument dataptr. The length of
  the data is passed as the len parameter. The apiflags can be one or more of:
  - TCP_WRITE_FLAG_COPY: indicates whether the new memory should be allocated
    for the data to be copied into. If this flag is not given, no new memory
    should be allocated and the data should only be referenced by pointer. This
    also means that the memory behind dataptr must not change until the data is
    ACKed by the remote host
  - TCP_WRITE_FLAG_MORE: indicates that more data follows. If this is omitted,
    the PSH flag is set in the last segment created by this call to tcp_write.
    If this flag is given, the PSH flag is not set.

  The tcp_write() function will fail and return ERR_MEM if the length
  of the data exceeds the current send buffer size or if the length of
  the queue of outgoing segment is larger than the upper limit defined
  in lwipopts.h. The number of bytes available in the output queue can
  be retrieved with the tcp_sndbuf() function.

  The proper way to use this function is to call the function with at
  most tcp_sndbuf() bytes of data. If the function returns ERR_MEM,
  the application should wait until some of the currently enqueued
  data has been successfully received by the other host and try again.

- void tcp_sent(struct tcp_pcb *pcb,
                err_t (* sent)(void *arg, struct tcp_pcb *tpcb,
                u16_t len))

  Specifies the callback function that should be called when data has
  successfully been received (i.e., acknowledged) by the remote
  host. The len argument passed to the callback function gives the
  amount bytes that was acknowledged by the last acknowledgment.

  
--- Receiving TCP data

TCP data reception is callback based - an application specified
callback function is called when new data arrives. When the
application has taken the data, it has to call the tcp_recved()
function to indicate that TCP can advertise increase the receive
window.

- void tcp_recv(struct tcp_pcb *pcb,
                err_t (* recv)(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err))

  Sets the callback function that will be called when new data
  arrives. The callback function will be passed a NULL pbuf to
  indicate that the remote host has closed the connection. If
  there are no errors and the callback function is to return
  ERR_OK, then it must free the pbuf. Otherwise, it must not
  free the pbuf so that lwIP core code can store it.

- void tcp_recved(struct tcp_pcb *pcb, u16_t len)

  Must be called when the application has received the data. The len
  argument indicates the length of the received data.


--- Application polling

When a connection is idle (i.e., no data is either transmitted or
received), lwIP will repeatedly poll the application by calling a
specified callback function. This can be used either as a watchdog
timer for killing connections that have stayed idle for too long, or
as a method of waiting for memory to become available. For instance,
if a call to tcp_write() has failed because memory wasn't available,
the application may use the polling functionality to call tcp_write()
again when the connection has been idle for a while.

- void tcp_poll(struct tcp_pcb *pcb, 
                err_t (* poll)(void *arg, struct tcp_pcb *tpcb),
                u8_t interval)

  Specifies the polling interval and the callback function that should
  be called to poll the application. The interval is specified in
  number of TCP coarse grained timer shots, which typically occurs
  twice a second. An interval of 10 means that the application would
  be polled every 5 seconds.


--- Closing and aborting connections

- err_t tcp_close(struct tcp_pcb *pcb)

  Closes the connection. The function may return ERR_MEM if no memory
  was available for closing the connection. If so, the application
  should wait and try again either by using the acknowledgment
  callback or the polling functionality. If the close succeeds, the
  function returns ERR_OK.

  The pcb is deallocated by the TCP code after a call to tcp_close(). 

- void tcp_abort(struct tcp_pcb *pcb)

  Aborts the connection by sending a RST (reset) segment to the remote
  host. The pcb is deallocated. This function never fails.

  ATTENTION: When calling this from one of the TCP callbacks, make
  sure you always return ERR_ABRT (and never return ERR_ABRT otherwise
  or you will risk accessing deallocated memory or memory leaks!


If a connection is aborted because of an error, the application is
alerted of this event by the err callback. Errors that might abort a
connection are when there is a shortage of memory. The callback
function to be called is set using the tcp_err() function.

- void tcp_err(struct tcp_pcb *pcb, void (* err)(void *arg,
       err_t err))

  The error callback function does not get the pcb passed to it as a
  parameter since the pcb may already have been deallocated.


--- UDP interface

The UDP interface is similar to that of TCP, but due to the lower
level of complexity of UDP, the interface is significantly simpler.

- struct udp_pcb *udp_new(void)

  Creates a new UDP pcb which can be used for UDP communication. The
  pcb is not active until it has either been bound to a local address
  or connected to a remote address.

- void udp_remove(struct udp_pcb *pcb)

  Removes and deallocates the pcb.  
  
- err_t udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr,
                 u16_t port)

  Binds the pcb to a local address. The IP-address argument "ipaddr"
  can be IP_ADDR_ANY to indicate that it should listen to any local IP
  address. The function currently always return ERR_OK.

- err_t udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr,
                    u16_t port)

  Sets the remote end of the pcb. This function does not generate any
  network traffic, but only set the remote address of the pcb.

- err_t udp_disconnect(struct udp_pcb *pcb)

  Remove the remote end of the pcb. This function does not generate
  any network traffic, but only removes the remote address of the pcb.

- err_t udp_send(struct udp_pcb *pcb, struct pbuf *p)

  Sends the pbuf p. The pbuf is not deallocated.

- void udp_recv(struct udp_pcb *pcb,
                void (* recv)(void *arg, struct udp_pcb *upcb,
                                         struct pbuf *p,
                                         ip_addr_t *addr,
                                         u16_t port),
                              void *recv_arg)

  Specifies a callback function that should be called when a UDP
  datagram is received.
  

--- System initalization

A truly complete and generic sequence for initializing the lwIP stack
cannot be given because it depends on additional initializations for
your runtime environment (e.g. timers).

We can give you some idea on how to proceed when using the raw API.
We assume a configuration using a single Ethernet netif and the
UDP and TCP transport layers, IPv4 and the DHCP client.

Call these functions in the order of appearance:

- lwip_init()

  Initialize the lwIP stack and all of its subsystems.

- netif_add(struct netif *netif, const ip4_addr_t *ipaddr,
            const ip4_addr_t *netmask, const ip4_addr_t *gw,
            void *state, netif_init_fn init, netif_input_fn input)

  Adds your network interface to the netif_list. Allocate a struct
  netif and pass a pointer to this structure as the first argument.
  Give pointers to cleared ip_addr structures when using DHCP,
  or fill them with sane numbers otherwise. The state pointer may be NULL.

  The init function pointer must point to a initialization function for
  your Ethernet netif interface. The following code illustrates its use.
  
  err_t netif_if_init(struct netif *netif)
  {
    u8_t i;
    
    for (i = 0; i < ETHARP_HWADDR_LEN; i++) {
      netif->hwaddr[i] = some_eth_addr[i];
    }
    init_my_eth_device();
    return ERR_OK;
  }
  
  For Ethernet drivers, the input function pointer must point to the lwIP
  function ethernet_input() declared in "netif/etharp.h". Other drivers
  must use ip_input() declared in "lwip/ip.h".
  
- netif_set_default(struct netif *netif)

  Registers the default network interface.

- netif_set_link_up(struct netif *netif)

  This is the hardware link state; e.g. whether cable is plugged for wired
  Ethernet interface. This function must be called even if you don't know
  the current state. Having link up and link down events is optional but
  DHCP and IPv6 discover benefit well from those events.

- netif_set_up(struct netif *netif)

  This is the administrative (= software) state of the netif, when the
  netif is fully configured this function must be called.

- dhcp_start(struct netif *netif)

  Creates a new DHCP client for this interface on the first call.
  
  You can peek in the netif->dhcp struct for the actual DHCP status.

- sys_check_timeouts()

  When the system is running, you have to periodically call
  sys_check_timeouts() which will handle all timers for all protocols in
  the stack; add this to your main loop or equivalent.


--- Optimalization hints

The first thing you want to optimize is the lwip_standard_checksum()
routine from src/core/inet.c. You can override this standard
function with the #define LWIP_CHKSUM <your_checksum_routine>.

There are C examples given in inet.c or you might want to
craft an assembly function for this. RFC1071 is a good
introduction to this subject.

Other significant improvements can be made by supplying
assembly or inline replacements for htons() and htonl()
if you're using a little-endian architecture.
#define lwip_htons(x) <your_htons>
#define lwip_htonl(x) <your_htonl>
If you #define them to htons() and htonl(), you should
#define LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS to prevent lwIP from
defining hton*/ntoh* compatibility macros.

Check your network interface driver if it reads at
a higher speed than the maximum wire-speed. If the
hardware isn't serviced frequently and fast enough
buffer overflows are likely to occur.

E.g. when using the cs8900 driver, call cs8900if_service(ethif)
as frequently as possible. When using an RTOS let the cs8900 interrupt
wake a high priority task that services your driver using a binary
semaphore or event flag. Some drivers might allow additional tuning
to match your application and network.

For a production release it is recommended to set LWIP_STATS to 0.
Note that speed performance isn't influenced much by simply setting
high values to the memory options.

For more optimization hints take a look at the lwIP wiki.

--- Zero-copy MACs

To achieve zero-copy on transmit, the data passed to the raw API must
remain unchanged until sent. Because the send- (or write-)functions return
when the packets have been enqueued for sending, data must be kept stable
after that, too.

This implies that PBUF_RAM/PBUF_POOL pbufs passed to raw-API send functions
must *not* be reused by the application unless their ref-count is 1.

For no-copy pbufs (PBUF_ROM/PBUF_REF), data must be kept unchanged, too,
but the stack/driver will/must copy PBUF_REF'ed data when enqueueing, while
PBUF_ROM-pbufs are just enqueued (as ROM-data is expected to never change).

Also, data passed to tcp_write without the copy-flag must not be changed!

Therefore, be careful which type of PBUF you use and if you copy TCP data
or not!
